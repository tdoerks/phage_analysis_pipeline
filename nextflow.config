// Nextflow configuration for K-State Beocat HPC
params {
    // Input parameters
    assemblies = "path/to/your/assemblies/*.fasta"
    outdir = "results"
    
    // Database parameters
    prophage_db_url = "https://prophage-db.s3.amazonaws.com/prophage_db.dmnd"
    
    // Resource limits
    max_memory = '100.GB'
    max_cpus = 16
    max_time = '24.h'
}

// Apptainer configuration
apptainer {
    enabled = true
    autoMounts = true
    cacheDir = "$HOME/.apptainer/cache"
}

// Slurm executor configuration
executor {
    name = 'slurm'
    queueSize = 50
}

// Process-specific configurations
process {
    executor = 'slurm'
    
    // Default resources with killable option
    memory = '32.GB'
    cpus = 8
    time = '4.h'
    clusterOptions = '--gres=killable:0'
    
    // Process-specific resource allocation
    withName: 'VIBRANT' {
        container = 'quay.io/biocontainers/vibrant:1.2.1--hdfd78af_3'
        memory = '64.GB'
        cpus = 16
        time = '12.h'
    }
    
    withName: 'DIAMOND_PROPHAGE' {
        container = 'quay.io/biocontainers/diamond:2.1.13--h13889ed_0'
        memory = '32.GB'
        cpus = 16
        time = '8.h'
    }
    
    withName: 'CHECKV' {
        container = 'quay.io/biocontainers/checkv:1.0.2--pyhdfd78af_0'
        memory = '16.GB'
        cpus = 4
        time = '2.h'
    }
    
    withName: 'PHANOTATE' {
        container = 'quay.io/biocontainers/phanotate:1.6.7--py311he264feb_0'
        memory = '8.GB'
        cpus = 4
        time = '2.h'
    }
    
    withName: 'COMBINE_RESULTS' {
        container = 'quay.io/biocontainers/bioframe:0.8.0--pyhdfd78af_0'
        memory = '16.GB'
        cpus = 2
        time = '1.h'
    }
    
    // High-memory processes without killable option
    withName: 'DOWNLOAD_PROPHAGE_DB' {
        container = 'quay.io/biocontainers/wget:1.21.4'
        memory = '100.GB'
        cpus = 16
        time = '24.h'
        clusterOptions = ''  // Remove killable for critical downloads
    }
}

// Capture execution reports
timeline {
    enabled = false
    file = "${params.outdir}/pipeline_info/execution_timeline.html"
}
report {
    enabled = false
    file = "${params.outdir}/pipeline_info/execution_report.html"
}
trace {
    enabled = false
    file = "${params.outdir}/pipeline_info/execution_trace.txt"
}
dag {
    enabled = false    
    file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

// Error handling
process.shell = ['/bin/bash', '-euo', 'pipefail']