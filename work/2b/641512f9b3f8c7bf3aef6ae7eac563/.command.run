#!/bin/bash
#SBATCH -J nf-PHAGE_ANALYSIS_DOWNLOAD_PROPHAGE_DB
#SBATCH -o /homes/tylerdoe/pipelines/phage_analysis_pipeline/work/2b/641512f9b3f8c7bf3aef6ae7eac563/.command.log
#SBATCH --no-requeue
#SBATCH --signal B:USR2@30
#SBATCH -c 16
#SBATCH -t 24:00:00
#SBATCH --mem 102400M
NXF_CHDIR=/homes/tylerdoe/pipelines/phage_analysis_pipeline/work/2b/641512f9b3f8c7bf3aef6ae7eac563
### ---
### name: 'PHAGE_ANALYSIS:DOWNLOAD_PROPHAGE_DB'
### container: '/homes/tylerdoe/.apptainer/cache/quay.io-biocontainers-wget-1.21.4.img'
### outputs:
### - 'prophage_db.dmnd'
### - 'versions.yml'
### ...
set -e
set -u
NXF_DEBUG=${NXF_DEBUG:=0}; [[ $NXF_DEBUG > 1 ]] && set -x
NXF_ENTRY=${1:-nxf_main}

# aws cli retry config
export AWS_RETRY_MODE=standard 
export AWS_MAX_ATTEMPTS=5
# aws helper
nxf_s3_upload() {
    local name=$1
    local s3path=$2
    if [[ "$name" == - ]]; then
      aws s3 cp --only-show-errors --storage-class STANDARD - "$s3path"
    elif [[ -d "$name" ]]; then
      aws s3 cp --only-show-errors --recursive --storage-class STANDARD "$name" "$s3path/$name"
    else
      aws s3 cp --only-show-errors --storage-class STANDARD "$name" "$s3path/$name"
    fi
}

nxf_s3_download() {
    local source=$1
    local target=$2
    local file_name=$(basename $1)
    local is_dir=$(aws s3 ls $source | grep -F "PRE ${file_name}/" -c)
    if [[ $is_dir == 1 ]]; then
        aws s3 cp --only-show-errors --recursive "$source" "$target"
    else 
        aws s3 cp --only-show-errors "$source" "$target"
    fi
}

nxf_sleep() {
  sleep $1 2>/dev/null || sleep 1;
}

nxf_date() {
    local ts=$(date +%s%3N);
    if [[ ${#ts} == 10 ]]; then echo ${ts}000
    elif [[ $ts == *%3N ]]; then echo ${ts/\%3N/000}
    elif [[ $ts == *3N ]]; then echo ${ts/3N/000}
    elif [[ ${#ts} == 13 ]]; then echo $ts
    else echo "Unexpected timestamp value: $ts"; exit 1
    fi
}

nxf_env() {
    echo '============= task environment ============='
    env | sort | sed "s/\(.*\)AWS\(.*\)=\(.\{6\}\).*/\1AWS\2=\3xxxxxxxxxxxxx/"
    echo '============= task output =================='
}

nxf_kill() {
    declare -a children
    while read P PP;do
        children[$PP]+=" $P"
    done < <(ps -e -o pid= -o ppid=)

    kill_all() {
        [[ $1 != $$ ]] && kill $1 2>/dev/null || true
        for i in ${children[$1]:=}; do kill_all $i; done
    }

    kill_all $1
}

nxf_mktemp() {
    local base=${1:-/tmp}
    mkdir -p "$base"
    if [[ $(uname) = Darwin ]]; then mktemp -d $base/nxf.XXXXXXXXXX
    else TMPDIR="$base" mktemp -d -t nxf.XXXXXXXXXX
    fi
}

nxf_fs_copy() {
  local source=$1
  local target=$2
  local basedir=$(dirname $1)
  mkdir -p $target/$basedir
  cp -fRL $source $target/$basedir
}

nxf_fs_move() {
  local source=$1
  local target=$2
  local basedir=$(dirname $1)
  mkdir -p $target/$basedir
  mv -f $source $target/$basedir
}

nxf_fs_rsync() {
  rsync -rRl $1 $2
}

nxf_fs_rclone() {
  rclone copyto $1 $2/$1
}

nxf_fs_fcp() {
  fcp $1 $2/$1
}

on_exit() {
    exit_status=${nxf_main_ret:=$?}
    printf -- $exit_status > /homes/tylerdoe/pipelines/phage_analysis_pipeline/work/2b/641512f9b3f8c7bf3aef6ae7eac563/.exitcode
    set +u
    exit $exit_status
}

on_term() {
    set +e
    [[ "$pid" ]] && nxf_kill $pid
}

nxf_launch() {
    set +u; env - PATH="$PATH" ${TMP:+APPTAINERENV_TMP="$TMP"} ${TMPDIR:+APPTAINERENV_TMPDIR="$TMPDIR"} ${NXF_TASK_WORKDIR:+APPTAINERENV_NXF_TASK_WORKDIR="$NXF_TASK_WORKDIR"} apptainer exec --no-home --pid -B /homes/tylerdoe/pipelines/phage_analysis_pipeline/work/2b/641512f9b3f8c7bf3aef6ae7eac563 /homes/tylerdoe/.apptainer/cache/quay.io-biocontainers-wget-1.21.4.img /bin/bash -c "cd $NXF_TASK_WORKDIR; /bin/bash -euo pipefail /homes/tylerdoe/pipelines/phage_analysis_pipeline/work/2b/641512f9b3f8c7bf3aef6ae7eac563/.command.sh"
}

nxf_stage() {
    true
}

nxf_unstage() {
    true
    cp .command.out /homes/tylerdoe/pipelines/phage_analysis_pipeline/work/2b/641512f9b3f8c7bf3aef6ae7eac563/.command.out || true
    cp .command.err /homes/tylerdoe/pipelines/phage_analysis_pipeline/work/2b/641512f9b3f8c7bf3aef6ae7eac563/.command.err || true
    [[ ${nxf_main_ret:=0} != 0 ]] && return
    IFS=$'\n'
    for name in $(eval "ls -1d prophage_db.dmnd versions.yml" | sort | uniq); do
        nxf_fs_move "$name" /homes/tylerdoe/salmonella_phage_results/databases || true
    done
    unset IFS
}

nxf_main() {
    trap on_exit EXIT
    trap on_term TERM INT USR2
    trap '' USR1

    [[ "${NXF_CHDIR:-}" ]] && cd "$NXF_CHDIR"
    export NXF_BOXID="nxf-$(dd bs=18 count=1 if=/dev/urandom 2>/dev/null | base64 | tr +/ 0A | tr -d '\r\n')"
    NXF_SCRATCH=''
    [[ $NXF_DEBUG > 0 ]] && nxf_env
    touch /homes/tylerdoe/pipelines/phage_analysis_pipeline/work/2b/641512f9b3f8c7bf3aef6ae7eac563/.command.begin
    set +u
    set -u
    [[ $NXF_SCRATCH ]] && cd $NXF_SCRATCH
    export NXF_TASK_WORKDIR="$PWD"
    nxf_stage

    set +e
    (set -o pipefail; (nxf_launch | tee .command.out) 3>&1 1>&2 2>&3 | tee .command.err) &
    pid=$!
    wait $pid || nxf_main_ret=$?
    nxf_unstage
}

$NXF_ENTRY
